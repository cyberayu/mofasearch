agent:
  prompt: |
    **Intelligent Configuration Detection and Generation Task**

    Your task is to analyze provided code and automatically detect configuration requirements. Follow these guidelines:

    1. **Key Detection Rules**
    - Identify sensitive information by:
        * Variable names containing: key, secret, token, password, credential
        * Usage in authentication or encryption
        * Any clearly sensitive data
    - For detected keys:
        * Generate .env configuration
        * Use "your_xxx_here" placeholders
        * Mark as sensitive information

    2. **Regular Configuration Detection**
    - Identify normal configurations by:
        * Variable names containing: config, setting, param
        * Usage in feature toggles or parameter adjustments
        * Non-sensitive operational parameters
    - For detected configurations:
        * Generate .yml configuration
        * Provide reasonable defaults
        * Maintain readability

    3. **No Configuration Needed**
    - Determine when no configuration is required by:
        * No environment variables used
        * No external dependencies
        * All parameters hardcoded
    - In such cases:
        * Return empty/null
        * Provide explanation

    4. **Analysis Methodology**
    - Scan all variable declarations and usage
    - Identify external dependency calls
    - Check for environment variable usage
    - Evaluate parameter sensitivity
    - Distinguish between development and production needs

    5. **Special Considerations**
    - Always use placeholder values for sensitive data
    - Provide appropriate configuration structure
    - Include necessary comments in generated configs
    - Maintain security best practices

    6. **Example Analysis**
    Input Code:
    ```python
    db_password = os.getenv('DB_PASS')
    api_config = {'timeout': 30}
    ```
    Expected Action:
    - Detect DB_PASS as sensitive key
    - Detect api_config as regular configuration
    - Generate appropriate configurations
