agent:
  prompt: |
    Your task is to analyze the provided code and automatically detect configuration requirements. Follow these guidelines:
    1. **Key Detection Rules**
    - Identify sensitive information by:
        * Variable names containing: key, secret, token, password, credential
        * Usage in authentication or encryption
        * Any clearly sensitive data
    - For detected keys:
        * Generate .env configuration
        * Use "your_xxx_here" placeholders
        * Mark as sensitive information
    
    2. **Regular Configuration Detection**
    - Identify normal configurations by:
        * Variable names containing: config, setting, param
        * Usage in feature toggles or parameter adjustments
        * Non-sensitive operational parameters
    - For detected configurations:
        * Generate .yml configuration
        * Provide reasonable defaults
        * Maintain readability
    
    3. **No Configuration Needed**
    - Determine when no configuration is required by:
        * No environment variables used
        * No external dependencies
        * All parameters hardcoded
    - In such cases:
        * Return empty/null
        * Provide explanation
    
    4. **Analysis Methodology**
    - Scan all variable declarations and usage
    - Identify external dependency calls
    - Check for environment variable usage
    - Evaluate parameter sensitivity
    - Distinguish between development and production needs
    
    5. **Special Considerations**
    - Always use placeholder values for sensitive data
    - Provide appropriate configuration structure
    - Include necessary comments in generated configs
    - Maintain security best practices
    
    6. **Module Generation**
    - First, use `module_name` and `agent_name`, which will be used for configuration generation.
    - Ensure that in `pyproject.toml`, the `packages` and `tool.poetry.scripts` follow the rule based on the generated `module_name`.
    - The `[tool.poetry] name` in `pyproject.toml` should be the same as `agent_name` in the generated class.
    
    7. **Example Analysis**
    Input Code:
    ```python
    db_password = os.getenv('DB_PASS')
    api_config = {'timeout': 30}
    ```
    Expected Action:
    - Detect DB_PASS as sensitive key
    - Detect api_config as regular configuration
    - Generate appropriate configurations
    - Ensure `module_name` is generated first, followed by pyproject.toml adjustments as per rules

  agent_name_gen_prompt: |
    # Project Identifier Generation Protocol
    
    ## 1. Objective
    Automatically derive technical identifiers (`agent_name` and `module_name`) from analysis of:
    - User requirement descriptions
    - Source code structure
    - Existing configuration patterns
    
    ---
    
    ## 2. Input Analysis Matrix
    
    | Input Source       | Detection Signals                          | Priority Level |
    |--------------------|--------------------------------------------|----------------|
    | User Requirements  | - Active verbs (build/create/develop) <br> - Domain terminology <br> - System-type indicators | High           |
    | Source Code        | - Entrypoint class/method names <br> - Inheritance patterns <br> - Main execution context | Medium-High    |
    | File System        | - Root directory naming <br> - Parent folder structure <br> - Configuration file names | Medium         |
    
    ---
    
    ## 3. Naming Convention Rules
    
    ### 3.1 Agent Name Requirements
    - **Format**: PascalCase 
    - **Content**: 
      - Must contain domain-specific noun
      - Prohibits generic terms (Manager/Handler/Service)
      - Length: 3-5 words (15-25 characters)
    - **Validation**: 
      ```regex
      ^[A-Z][a-zA-Z0-9]+(?:[A-Z][a-zA-Z0-9]*){2,4}$
      ```
    
    ### 3.2 Module Name Requirements
    - **Format**: snake_case
    - **Content**:
      - Semantic mapping to agent_name
      - No reserved keywords
      - Length: 2-4 segments (8-20 characters)
    - **Validation**:
      ```regex
      ^[a-z]{2,}(_[a-z0-9]+){1,3}$ 
      ```
    ---
    
    ## 4. Conflict Resolution Protocol
    
    ### 4.1 Priority Hierarchy
    1. User-explicit naming in requirements
    2. Code entrypoint class names
    3. Directory-derived names
    4. Generated semantic combinations
    
    ### 4.2 Resolution Strategies
    | Conflict Type               | Resolution Action                     |
    |-----------------------------|---------------------------------------|
    | Name duplication            | Append contextual suffix (_core/_dev)|
    | Length violation             | Apply approved abbreviations         |
    | Non-compliant characters    | Perform sanitization replacement     |
    | Semantic mismatch           | Inject domain-specific modifiers     |
    
    ---
    
    ## 5. Validation Workflow
    
    1. **Format Check**: Regex validation
    2. **Semantic Audit**: 
       - Agent name reflects business capability
       - Module name indicates technical scope
    3. **Collision Check**: 
       - Verify PyPI name availability
       - Ensure project uniqueness
    
    ---
    
    ## 6. Example Scenarios
    
    ### Scenario A: Clear Technical Signals
    **Input**: 
    - Requirements: "Develop PDF processing solution"
    - Code: `class PDFProcessor: ...`
    
    **Output**:
    ```json
    {
      "agent_name": "PDFProcessor",
      "module_name": "pdf_processor",
    }
    ```
    
    ### Scenario B: Ambiguous Inputs
    **Input**:
    - Requirements: "Create data analysis tool"
    - Code: `def main(): ...`
    
    **Output**:
    ```json
    {
      "agent_name": "DataAnalysisTool",
      "module_name": "data_analyzer",
    }
    ```
    
    ---
    
    ## 7. Output Specification
    
    ```jsonc
    {
      "agent_name": "PascalCase technical identifier",
      "module_name": "snake_case implementation name",
    }
    ```

